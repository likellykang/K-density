install.packages("rmutil")
library(truncdist)
library(coda)
library(rmutil)
##### Generating Simulation Data ########
get_pdf <- function(y, beta, alpha, lambda){
r<-pmax(-y*exp(lambda), y*exp(-lambda))
f_y <- beta/(cosh(lambda)*2*(alpha-1))*(1-pgamma(r, shape = alpha-1, rate = beta))
return(f_y)
}


grid<-seq(-6, 6, by=0.01)
f<-get_pdf(grid, 2, 3, 0.5)
plot(grid,f,type="l")

eplison<-sample(grid, size=101, prob = f,replace = TRUE)
hist(eplison,breaks = 20, freq = F)
x1=rnorm(101)
X101 = cbind(rep(1,101),x1)
Y101<-0.3+0.5*x1+eplison
hist(Y101,breaks = 20, freq = F)

####### MCMC #########################

logdposteior.t<-function(t, r,alpha, beta){
  log.pt<-(alpha-2)*log(t)-t*beta
  return(log.pt)
}

MH_t<-function(t, r, alpha, beta, Ulimit){
  proposal<-runif(1, r,Ulimit)
  probt<-logdposteior.t(proposal, r,alpha, beta)-logdposteior.t(t, r,alpha, beta)
  if (log(runif(1)) < probt){
    return(proposal)
  } else {return(t)}
}

update.t<-function(mydata, alpha, beta, lambda,Theta){
  ## sigma is a T*1 vector, same length with mydata ##
  ts<-numeric()
  k<-length(mydata)
  r<-pmax(-(mydata-Theta)*exp(lambda), (mydata-Theta)*exp(-lambda))
  #t<-r+1
  #Ulimit<-max(t)+5
  #for (i in 1:k){
    #ts[i]<- MH_t(t[i],r[i],alpha-1, beta, Ulimit)
    #print(ts[i])
  #}
  for (i in 1:length(mydata)){
    ts[i]<-rtrunc(1, spec="gamma", a = r[i], b = Inf,shape=alpha-1,rate=beta)
    #print(t[i])
 }
  return(ts)
}

update.beta<-function(mydata, t, c, d, alpha){
  n=length(mydata)
  shape=n*alpha+c
  rate=d+sum(t)
  beta.new<-rgamma(1, shape,rate)
  return(beta.new)
}

logdposteior.alpha<-function(alpha, m, q, beta, t,n){
  dprior.alpha<-dtrunc(alpha, spec="gamma", a = 1, b = Inf,shape=m,rate=q)
  logdpos<-log(dprior.alpha)+n*alpha*log(beta)-n*log(gamma(alpha))+(alpha-2)*sum(log(t))
  return(logdpos)
}

update.alpha.MH<-function(mydata,alpha,m,q,std,beta,t){
  n<-length(mydata)
  chain<-alpha
  proposal<-rtrunc(1, spec="norm", a =1, b = Inf,mean=chain, sd=std) ## proposal from truncated normal
  prob<-logdposteior.alpha(proposal, m, q, beta, t,n)-logdposteior.alpha(chain, m, q, beta, t,n)+ log(dtrunc( proposal, spec="norm", a = 1, b = Inf,mean=chain, sd=std)) - log(dtrunc(chain, spec="norm", a = 1, b = Inf,mean=proposal, sd=std))  
  if (log(runif(1)) < prob){
    chain = proposal
  } else {chain= chain}
  return(chain)
}

logdposteior.lambda<-function(mydata,lambda){
  n<-length(mydata)
  logdpost<-n*log(1/(cosh(lambda)))
  return(logdpost)
} 

update.lambda.MH<-function(mydata,lambda,alpha,beta,t,Theta){
  n<-length(mydata)
  k<-numeric()
  l<-numeric()
  chain1<-lambda
  for(i in 1:n){
    if (mydata[i] > Theta[i]){
      k[i]<- -log(t[i]/(mydata[i]-Theta[i]))
      l[i]<-NA
    } else if (mydata[i] == Theta[i]) {
      k[i]<- NA
      l[i]<-NA
    } else { 
      l[i]<- log(-t[i]/(mydata[i]-Theta[i]))
      k[i]<- NA
    }
  }
  K<-max(k,na.rm=TRUE)
  L<-min(l,na.rm=TRUE)
  #print(K)
  #print(L)
  proposal1<-runif(1, min=K,max=L) 
  prob1<-logdposteior.lambda(mydata,proposal1)-logdposteior.lambda(mydata,chain1)
  if (log(runif(1)) < prob1){
    chain1 = proposal1
  } else {chain1 = chain1}
  return(chain1)
}

logdposteior.b<-function(mydata,alpha,lambda,beta,b, Theta){
  fy<-get_pdf(mydata-Theta, beta, alpha, lambda)
  d1<-dnorm(b, 0, 1) ## prior Normal (0,1)
  logdpost<-sum(log(fy))+log(d1)
  return(logdpost)
} 

update.b.MH<-function(mydata, X, OLS.b, alpha, beta, lambda){
  n<-length(mydata)
  p<-length(OLS.b)
  #for(j in 1:iter){
    proposal<-OLS.b
    ## update intercept 
    proposal[1]<-rnorm(1, mean=0, sd=1)
    theta<-X%*%as.matrix(OLS.b)
    theta.new<-X%*%as.matrix(proposal)
    prob<-logdposteior.b(mydata,alpha,lambda,beta,proposal[1],theta.new)-logdposteior.b(mydata,alpha,lambda,beta,OLS.b[1], theta)-dnorm(proposal[1], mean=OLS.b[1], sd=1, log=T)+dnorm(OLS.b[1],mean=proposal[1], sd=1, log=T)
    if (log(runif(1)) < prob){
      OLS.b[1]<-proposal[1]
    } else {OLS.b[1]=OLS.b[1]}
    
     ##  update b_1 ##
      proposal<-OLS.b
      proposal[2]<-rnorm(1, mean=0, sd=1)
      theta<-X%*%as.matrix(OLS.b)
      theta.new<-X%*%as.matrix(proposal)
      prob<-logdposteior.b(mydata,alpha,lambda,beta,proposal[2],theta.new)-logdposteior.b(mydata,alpha,lambda,beta,OLS.b[2],theta)-dnorm(proposal[2], mean=OLS.b[2], sd=1, log=T)+dnorm(OLS.b[2],mean=proposal[2], sd=1, log=T)
      if (log(runif(1)) < prob){
        OLS.b[2]<-proposal[2]
      } else {OLS.b[2]=OLS.b[2]}
  
  return(OLS.b)
}

Gibbs<-function(mydata,X,alpha,m,q,std,beta,lambda,OLS.b,c,d,iteration, iter){
  ## initial value ##
  T<-length(mydata)
  p<-length(OLS.b)
  beta.array<-numeric()
  alpha.array<-numeric()
  lambda.array<-numeric()
  MCMC.B<-matrix(0, p, iteration)
  beta.array[1]=beta
  alpha.array[1]=alpha
  lambda.array[1]=lambda
  MCMC.B[,1]<-OLS.b
  j=2
  for (j in 2:iteration){
    TEA<-X%*%MCMC.B[,j-1]
    t<-update.t(mydata,  alpha.array[j-1], beta.array[j-1], lambda.array[j-1],TEA)
    #print(t)
    ## update beta 
    #for(k in 1:iter){
      beta.array[j]<-update.beta(mydata, t, c, d, alpha.array[j-1])
    #}
    ## update alpha
    #for(k in 1:iter){
      alpha.array[j]<-update.alpha.MH(mydata,alpha.array[j-1],m,q,std,beta.array[j],t) 
    #}
    ## update lambda 
      for(k in 1:iter){
    lambda.array[j]<-update.lambda.MH(mydata,lambda.array[j-1],alpha.array[j],beta.array[j],t,TEA)
      }
    ## update B
    #for(k in 1:iter){
    MCMC.B[,j]<-update.b.MH(mydata, X, MCMC.B[,j-1],  alpha.array[j],  beta.array[j], lambda.array[j])
    #}
  }
  return(list(beta.array,alpha.array,lambda.array,MCMC.B))
}

fit1 <- lm(Y101[1:100]~X101[1:100,2])
fit1$coefficients
TEST1<-Gibbs(Y101[1:100],X101[1:100,],alpha=4,m=3,q=1,std=1,beta=3,lambda=0,fit1$coefficients,c=3,d=1,100000,100)



